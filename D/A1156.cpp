#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>

#include "A1156.h"




double A1156::A1156_0(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_4(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_5(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_6(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_7(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_8(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_9(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_10(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_11(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_12(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_13(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_14(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_15(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_16(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_17(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_18(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_19(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_20(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_21(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_22(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_23(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_24(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_25(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_26(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_27(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_28(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_29(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_30(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_31(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_32(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_33(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_34(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_35(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_36(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_37(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_38(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_39(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_40(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_41(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_42(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_43(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_44(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_45(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_46(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_47(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_48(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_49(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_50(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_51(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_52(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_53(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_54(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_55(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_56(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_57(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_58(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_59(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_60(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_61(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_62(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_63(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_64(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_65(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_66(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_67(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_68(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_69(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_70(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_71(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_72(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_73(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_74(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_75(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_76(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_77(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_78(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_79(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_80(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_81(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_82(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_83(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_84(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_85(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_86(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_87(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_88(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_89(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_90(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_91(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_92(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_93(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_94(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_95(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_96(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_97(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_98(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_99(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1000(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1001(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1002(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1003(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1004(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1005(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1006(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1007(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1008(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1009(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1010(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1011(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1012(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1013(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1014(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1015(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1016(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1017(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1018(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1019(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1020(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1021(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1022(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1023(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1024(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1025(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1026(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1027(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1028(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1029(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1030(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1031(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1032(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1033(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1034(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1035(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1036(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1037(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1038(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1039(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1040(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1041(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1042(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1043(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1044(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1045(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1046(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1047(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1048(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1049(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1050(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1051(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1052(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1053(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1054(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1055(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1056(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1057(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1058(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1059(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1060(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1061(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1062(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1063(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1064(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1065(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1066(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1067(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1068(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1069(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1070(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1071(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1072(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1073(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1074(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1075(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1076(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1077(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1078(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1079(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1080(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1081(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1082(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1083(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1084(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1085(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1086(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1087(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1088(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1089(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1090(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1091(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1092(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1093(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1094(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1095(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1096(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1097(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1098(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1099(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_1999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2000(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2001(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2002(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2003(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2004(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2005(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2006(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2007(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2008(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2009(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2010(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2011(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2012(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2013(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2014(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2015(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2016(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2017(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2018(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2019(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2020(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2021(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2022(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2023(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2024(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2025(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2026(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2027(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2028(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2029(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2030(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2031(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2032(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2033(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2034(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2035(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2036(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2037(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2038(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2039(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2040(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2041(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2042(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2043(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2044(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2045(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2046(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2047(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2048(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2049(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2050(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2051(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2052(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2053(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2054(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2055(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2056(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2057(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2058(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2059(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2060(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2061(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2062(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2063(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2064(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2065(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2066(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2067(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2068(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2069(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2070(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2071(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2072(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2073(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2074(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2075(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2076(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2077(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2078(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2079(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2080(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2081(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2082(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2083(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2084(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2085(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2086(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2087(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2088(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2089(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2090(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2091(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2092(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2093(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2094(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2095(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2096(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2097(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2098(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2099(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_2999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3000(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3001(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3002(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3003(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3004(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3005(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3006(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3007(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3008(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3009(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3010(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3011(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3012(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3013(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3014(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3015(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3016(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3017(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3018(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3019(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3020(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3021(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3022(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3023(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3024(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3025(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3026(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3027(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3028(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3029(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3030(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3031(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3032(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3033(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3034(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3035(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3036(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3037(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3038(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3039(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3040(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3041(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3042(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3043(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3044(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3045(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3046(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3047(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3048(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3049(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3050(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3051(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3052(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3053(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3054(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3055(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3056(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3057(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3058(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3059(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3060(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3061(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3062(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3063(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3064(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3065(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3066(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3067(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3068(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3069(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3070(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3071(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3072(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3073(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3074(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3075(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3076(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3077(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3078(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3079(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3080(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3081(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3082(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3083(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3084(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3085(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3086(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3087(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3088(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3089(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3090(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3091(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3092(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3093(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3094(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3095(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3096(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3097(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3098(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3099(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1156::A1156_3999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}


