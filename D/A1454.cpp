#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>

#include "A1454.h"




double A1454::A1454_0(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_4(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_5(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_6(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_7(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_8(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_9(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_10(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_11(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_12(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_13(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_14(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_15(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_16(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_17(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_18(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_19(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_20(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_21(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_22(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_23(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_24(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_25(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_26(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_27(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_28(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_29(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_30(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_31(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_32(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_33(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_34(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_35(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_36(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_37(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_38(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_39(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_40(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_41(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_42(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_43(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_44(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_45(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_46(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_47(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_48(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_49(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_50(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_51(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_52(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_53(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_54(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_55(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_56(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_57(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_58(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_59(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_60(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_61(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_62(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_63(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_64(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_65(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_66(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_67(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_68(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_69(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_70(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_71(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_72(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_73(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_74(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_75(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_76(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_77(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_78(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_79(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_80(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_81(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_82(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_83(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_84(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_85(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_86(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_87(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_88(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_89(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_90(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_91(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_92(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_93(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_94(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_95(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_96(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_97(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_98(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_99(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1000(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1001(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1002(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1003(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1004(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1005(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1006(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1007(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1008(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1009(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1010(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1011(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1012(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1013(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1014(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1015(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1016(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1017(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1018(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1019(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1020(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1021(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1022(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1023(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1024(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1025(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1026(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1027(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1028(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1029(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1030(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1031(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1032(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1033(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1034(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1035(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1036(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1037(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1038(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1039(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1040(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1041(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1042(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1043(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1044(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1045(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1046(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1047(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1048(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1049(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1050(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1051(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1052(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1053(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1054(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1055(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1056(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1057(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1058(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1059(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1060(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1061(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1062(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1063(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1064(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1065(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1066(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1067(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1068(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1069(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1070(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1071(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1072(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1073(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1074(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1075(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1076(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1077(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1078(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1079(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1080(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1081(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1082(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1083(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1084(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1085(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1086(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1087(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1088(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1089(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1090(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1091(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1092(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1093(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1094(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1095(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1096(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1097(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1098(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1099(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_1999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2000(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2001(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2002(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2003(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2004(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2005(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2006(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2007(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2008(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2009(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2010(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2011(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2012(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2013(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2014(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2015(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2016(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2017(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2018(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2019(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2020(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2021(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2022(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2023(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2024(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2025(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2026(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2027(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2028(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2029(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2030(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2031(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2032(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2033(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2034(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2035(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2036(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2037(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2038(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2039(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2040(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2041(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2042(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2043(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2044(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2045(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2046(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2047(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2048(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2049(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2050(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2051(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2052(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2053(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2054(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2055(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2056(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2057(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2058(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2059(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2060(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2061(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2062(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2063(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2064(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2065(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2066(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2067(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2068(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2069(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2070(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2071(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2072(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2073(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2074(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2075(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2076(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2077(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2078(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2079(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2080(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2081(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2082(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2083(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2084(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2085(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2086(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2087(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2088(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2089(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2090(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2091(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2092(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2093(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2094(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2095(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2096(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2097(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2098(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2099(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_2999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3000(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3001(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3002(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3003(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3004(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3005(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3006(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3007(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3008(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3009(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3010(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3011(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3012(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3013(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3014(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3015(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3016(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3017(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3018(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3019(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3020(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3021(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3022(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3023(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3024(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3025(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3026(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3027(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3028(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3029(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3030(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3031(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3032(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3033(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3034(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3035(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3036(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3037(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3038(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3039(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3040(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3041(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3042(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3043(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3044(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3045(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3046(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3047(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3048(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3049(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3050(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3051(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3052(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3053(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3054(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3055(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3056(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3057(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3058(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3059(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3060(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3061(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3062(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3063(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3064(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3065(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3066(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3067(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3068(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3069(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3070(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3071(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3072(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3073(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3074(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3075(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3076(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3077(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3078(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3079(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3080(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3081(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3082(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3083(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3084(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3085(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3086(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3087(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3088(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3089(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3090(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3091(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3092(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3093(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3094(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3095(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3096(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3097(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3098(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3099(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1454::A1454_3999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}


