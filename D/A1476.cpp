#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>

#include "A1476.h"




double A1476::A1476_0(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_4(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_5(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_6(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_7(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_8(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_9(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_10(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_11(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_12(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_13(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_14(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_15(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_16(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_17(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_18(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_19(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_20(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_21(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_22(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_23(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_24(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_25(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_26(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_27(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_28(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_29(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_30(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_31(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_32(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_33(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_34(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_35(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_36(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_37(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_38(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_39(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_40(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_41(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_42(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_43(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_44(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_45(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_46(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_47(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_48(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_49(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_50(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_51(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_52(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_53(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_54(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_55(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_56(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_57(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_58(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_59(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_60(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_61(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_62(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_63(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_64(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_65(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_66(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_67(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_68(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_69(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_70(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_71(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_72(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_73(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_74(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_75(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_76(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_77(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_78(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_79(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_80(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_81(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_82(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_83(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_84(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_85(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_86(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_87(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_88(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_89(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_90(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_91(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_92(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_93(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_94(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_95(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_96(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_97(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_98(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_99(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1000(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1001(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1002(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1003(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1004(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1005(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1006(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1007(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1008(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1009(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1010(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1011(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1012(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1013(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1014(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1015(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1016(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1017(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1018(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1019(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1020(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1021(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1022(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1023(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1024(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1025(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1026(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1027(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1028(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1029(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1030(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1031(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1032(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1033(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1034(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1035(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1036(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1037(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1038(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1039(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1040(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1041(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1042(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1043(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1044(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1045(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1046(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1047(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1048(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1049(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1050(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1051(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1052(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1053(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1054(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1055(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1056(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1057(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1058(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1059(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1060(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1061(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1062(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1063(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1064(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1065(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1066(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1067(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1068(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1069(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1070(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1071(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1072(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1073(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1074(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1075(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1076(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1077(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1078(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1079(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1080(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1081(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1082(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1083(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1084(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1085(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1086(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1087(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1088(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1089(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1090(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1091(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1092(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1093(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1094(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1095(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1096(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1097(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1098(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1099(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_1999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2000(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2001(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2002(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2003(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2004(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2005(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2006(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2007(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2008(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2009(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2010(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2011(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2012(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2013(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2014(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2015(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2016(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2017(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2018(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2019(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2020(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2021(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2022(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2023(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2024(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2025(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2026(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2027(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2028(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2029(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2030(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2031(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2032(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2033(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2034(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2035(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2036(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2037(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2038(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2039(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2040(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2041(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2042(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2043(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2044(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2045(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2046(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2047(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2048(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2049(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2050(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2051(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2052(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2053(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2054(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2055(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2056(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2057(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2058(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2059(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2060(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2061(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2062(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2063(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2064(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2065(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2066(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2067(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2068(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2069(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2070(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2071(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2072(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2073(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2074(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2075(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2076(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2077(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2078(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2079(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2080(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2081(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2082(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2083(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2084(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2085(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2086(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2087(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2088(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2089(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2090(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2091(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2092(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2093(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2094(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2095(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2096(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2097(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2098(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2099(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_2999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3000(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3001(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3002(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3003(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3004(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3005(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3006(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3007(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3008(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3009(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3010(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3011(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3012(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3013(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3014(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3015(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3016(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3017(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3018(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3019(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3020(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3021(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3022(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3023(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3024(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3025(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3026(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3027(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3028(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3029(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3030(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3031(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3032(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3033(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3034(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3035(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3036(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3037(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3038(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3039(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3040(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3041(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3042(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3043(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3044(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3045(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3046(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3047(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3048(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3049(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3050(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3051(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3052(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3053(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3054(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3055(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3056(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3057(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3058(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3059(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3060(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3061(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3062(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3063(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3064(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3065(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3066(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3067(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3068(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3069(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3070(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3071(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3072(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3073(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3074(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3075(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3076(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3077(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3078(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3079(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3080(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3081(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3082(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3083(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3084(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3085(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3086(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3087(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3088(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3089(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3090(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3091(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3092(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3093(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3094(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3095(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3096(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3097(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3098(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3099(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3100(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3101(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3102(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3103(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3104(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3105(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3106(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3107(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3108(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3109(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3110(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3111(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3112(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3113(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3114(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3115(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3116(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3117(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3118(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3119(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3120(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3121(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3122(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3123(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3124(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3125(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3126(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3127(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3128(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3129(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3130(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3131(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3132(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3133(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3134(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3135(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3136(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3137(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3138(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3139(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3140(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3141(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3142(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3143(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3144(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3145(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3146(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3147(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3148(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3149(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3150(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3151(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3152(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3153(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3154(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3155(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3156(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3157(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3158(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3159(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3160(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3161(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3162(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3163(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3164(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3165(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3166(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3167(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3168(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3169(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3170(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3171(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3172(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3173(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3174(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3175(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3176(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3177(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3178(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3179(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3180(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3181(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3182(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3183(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3184(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3185(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3186(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3187(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3188(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3189(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3190(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3191(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3192(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3193(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3194(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3195(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3196(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3197(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3198(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3199(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3200(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3201(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3202(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3203(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3204(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3205(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3206(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3207(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3208(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3209(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3210(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3211(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3212(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3213(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3214(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3215(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3216(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3217(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3218(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3219(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3220(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3221(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3222(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3223(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3224(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3225(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3226(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3227(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3228(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3229(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3230(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3231(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3232(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3233(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3234(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3235(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3236(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3237(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3238(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3239(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3240(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3241(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3242(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3243(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3244(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3245(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3246(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3247(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3248(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3249(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3250(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3251(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3252(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3253(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3254(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3255(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3256(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3257(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3258(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3259(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3260(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3261(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3262(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3263(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3264(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3265(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3266(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3267(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3268(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3269(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3270(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3271(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3272(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3273(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3274(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3275(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3276(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3277(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3278(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3279(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3280(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3281(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3282(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3283(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3284(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3285(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3286(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3287(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3288(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3289(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3290(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3291(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3292(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3293(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3294(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3295(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3296(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3297(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3298(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3299(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3300(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3301(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3302(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3303(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3304(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3305(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3306(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3307(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3308(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3309(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3310(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3311(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3312(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3313(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3314(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3315(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3316(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3317(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3318(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3319(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3320(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3321(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3322(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3323(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3324(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3325(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3326(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3327(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3328(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3329(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3330(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3331(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3332(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3333(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3334(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3335(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3336(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3337(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3338(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3339(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3340(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3341(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3342(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3343(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3344(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3345(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3346(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3347(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3348(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3349(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3350(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3351(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3352(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3353(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3354(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3355(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3356(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3357(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3358(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3359(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3360(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3361(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3362(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3363(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3364(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3365(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3366(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3367(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3368(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3369(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3370(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3371(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3372(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3373(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3374(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3375(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3376(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3377(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3378(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3379(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3380(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3381(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3382(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3383(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3384(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3385(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3386(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3387(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3388(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3389(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3390(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3391(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3392(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3393(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3394(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3395(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3396(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3397(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3398(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3399(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3400(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3401(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3402(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3403(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3404(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3405(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3406(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3407(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3408(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3409(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3410(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3411(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3412(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3413(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3414(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3415(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3416(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3417(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3418(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3419(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3420(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3421(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3422(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3423(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3424(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3425(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3426(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3427(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3428(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3429(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3430(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3431(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3432(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3433(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3434(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3435(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3436(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3437(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3438(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3439(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3440(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3441(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3442(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3443(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3444(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3445(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3446(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3447(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3448(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3449(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3450(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3451(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3452(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3453(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3454(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3455(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3456(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3457(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3458(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3459(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3460(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3461(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3462(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3463(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3464(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3465(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3466(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3467(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3468(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3469(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3470(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3471(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3472(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3473(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3474(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3475(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3476(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3477(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3478(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3479(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3480(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3481(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3482(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3483(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3484(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3485(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3486(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3487(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3488(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3489(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3490(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3491(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3492(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3493(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3494(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3495(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3496(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3497(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3498(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3499(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3500(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3501(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3502(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3503(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3504(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3505(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3506(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3507(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3508(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3509(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3510(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3511(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3512(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3513(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3514(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3515(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3516(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3517(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3518(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3519(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3520(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3521(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3522(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3523(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3524(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3525(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3526(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3527(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3528(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3529(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3530(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3531(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3532(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3533(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3534(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3535(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3536(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3537(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3538(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3539(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3540(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3541(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3542(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3543(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3544(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3545(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3546(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3547(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3548(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3549(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3550(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3551(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3552(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3553(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3554(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3555(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3556(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3557(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3558(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3559(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3560(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3561(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3562(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3563(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3564(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3565(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3566(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3567(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3568(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3569(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3570(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3571(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3572(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3573(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3574(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3575(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3576(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3577(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3578(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3579(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3580(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3581(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3582(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3583(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3584(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3585(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3586(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3587(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3588(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3589(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3590(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3591(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3592(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3593(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3594(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3595(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3596(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3597(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3598(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3599(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3600(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3601(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3602(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3603(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3604(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3605(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3606(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3607(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3608(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3609(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3610(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3611(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3612(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3613(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3614(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3615(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3616(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3617(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3618(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3619(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3620(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3621(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3622(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3623(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3624(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3625(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3626(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3627(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3628(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3629(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3630(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3631(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3632(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3633(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3634(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3635(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3636(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3637(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3638(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3639(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3640(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3641(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3642(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3643(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3644(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3645(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3646(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3647(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3648(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3649(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3650(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3651(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3652(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3653(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3654(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3655(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3656(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3657(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3658(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3659(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3660(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3661(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3662(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3663(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3664(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3665(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3666(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3667(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3668(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3669(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3670(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3671(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3672(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3673(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3674(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3675(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3676(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3677(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3678(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3679(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3680(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3681(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3682(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3683(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3684(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3685(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3686(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3687(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3688(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3689(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3690(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3691(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3692(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3693(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3694(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3695(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3696(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3697(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3698(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3699(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3700(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3701(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3702(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3703(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3704(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3705(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3706(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3707(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3708(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3709(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3710(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3711(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3712(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3713(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3714(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3715(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3716(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3717(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3718(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3719(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3720(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3721(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3722(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3723(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3724(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3725(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3726(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3727(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3728(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3729(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3730(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3731(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3732(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3733(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3734(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3735(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3736(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3737(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3738(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3739(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3740(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3741(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3742(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3743(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3744(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3745(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3746(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3747(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3748(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3749(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3750(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3751(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3752(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3753(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3754(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3755(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3756(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3757(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3758(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3759(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3760(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3761(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3762(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3763(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3764(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3765(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3766(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3767(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3768(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3769(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3770(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3771(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3772(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3773(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3774(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3775(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3776(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3777(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3778(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3779(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3780(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3781(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3782(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3783(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3784(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3785(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3786(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3787(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3788(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3789(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3790(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3791(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3792(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3793(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3794(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3795(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3796(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3797(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3798(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3799(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3800(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3801(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3802(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3803(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3804(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3805(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3806(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3807(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3808(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3809(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3810(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3811(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3812(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3813(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3814(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3815(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3816(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3817(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3818(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3819(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3820(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3821(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3822(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3823(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3824(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3825(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3826(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3827(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3828(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3829(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3830(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3831(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3832(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3833(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3834(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3835(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3836(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3837(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3838(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3839(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3840(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3841(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3842(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3843(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3844(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3845(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3846(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3847(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3848(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3849(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3850(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3851(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3852(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3853(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3854(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3855(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3856(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3857(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3858(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3859(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3860(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3861(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3862(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3863(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3864(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3865(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3866(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3867(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3868(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3869(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3870(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3871(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3872(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3873(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3874(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3875(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3876(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3877(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3878(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3879(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3880(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3881(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3882(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3883(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3884(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3885(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3886(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3887(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3888(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3889(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3890(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3891(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3892(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3893(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3894(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3895(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3896(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3897(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3898(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3899(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3900(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3901(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3902(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3903(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3904(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3905(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3906(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3907(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3908(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3909(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3910(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3911(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3912(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3913(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3914(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3915(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3916(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3917(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3918(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3919(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3920(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3921(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3922(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3923(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3924(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3925(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3926(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3927(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3928(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3929(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3930(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3931(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3932(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3933(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3934(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3935(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3936(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3937(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3938(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3939(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3940(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3941(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3942(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3943(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3944(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3945(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3946(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3947(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3948(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3949(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3950(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3951(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3952(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3953(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3954(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3955(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3956(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3957(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3958(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3959(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3960(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3961(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3962(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3963(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3964(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3965(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3966(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3967(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3968(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3969(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3970(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3971(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3972(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3973(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3974(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3975(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3976(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3977(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3978(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3979(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3980(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3981(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3982(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3983(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3984(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3985(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3986(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3987(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3988(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3989(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3990(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3991(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3992(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3993(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3994(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3995(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3996(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3997(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3998(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}

double A1476::A1476_3999(const std::vector<std::shared_ptr<int>>& data)
{
    std::vector<int> values;

    // Extract the values from shared_ptrs and store them in a vector
    std::transform(data.begin(), data.end(), std::back_inserter(values), [](const std::shared_ptr<int>& ptr) {
        return *ptr;
    });

    // Sort the vector of values
    std::sort(values.begin(), values.end());

    // Calculate the median
    size_t size = values.size();
    if (size % 2 == 0) {
        // If the size is even, take the average of the middle two values
        return static_cast<double>(values[size / 2 - 1] + values[size / 2]) / 2.0;
    } else {
        // If the size is odd, return the middle value
        return static_cast<double>(values[size / 2]);
    }
}


